import hashlib
import os
import json

HASH_FILE = "file_hashes.json"

def calculate_hash(file_path):
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except FileNotFoundError:
        return None

def generate_hashes(directory):
    file_hashes = {}
    for root, _, files in os.walk(directory):
        for name in files:
            file_path = os.path.join(root, name)
            hash_val = calculate_hash(file_path)
            if hash_val:
                file_hashes[file_path] = hash_val
    return file_hashes

def save_hashes(hashes):
    with open(HASH_FILE, "w") as f:
        json.dump(hashes, f, indent=4)

def load_hashes():
    try:
        with open(HASH_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def check_integrity(directory):
    current_hashes = generate_hashes(directory)
    saved_hashes = load_hashes()
    
    modified = []
    deleted = []
    new = []

    for file, hash_val in saved_hashes.items():
        if file not in current_hashes:
            deleted.append(file)
        elif current_hashes[file] != hash_val:
            modified.append(file)

    for file in current_hashes:
        if file not in saved_hashes:
            new.append(file)

    print("\nIntegrity Report:")
    print("-----------------")
    if modified:
        print("Modified files:")
        for file in modified:
            print(f"  - {file}")
    if deleted:
        print("Deleted files:")
        for file in deleted:
            print(f"  - {file}")
    if new:
        print("New files:")
        for file in new:
            print(f"  - {file}")
    if not (modified or deleted or new):
        print("All files are unchanged.")

def main():
    print("File Integrity Checker")
    print("======================")
    directory = input("Enter directory to monitor: ")

    choice = input("Do you want to (s)ave or (c)heck integrity? [s/c]: ").lower()
    if choice == 's':
        hashes = generate_hashes(directory)
        save_hashes(hashes)
        print("Hashes saved.")
    elif choice == 'c':
        check_integrity(directory)
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()
